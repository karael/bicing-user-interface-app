image: docker:latest
services:
- docker:dind

stages:
- test
- build
- production
- publish

before_script:
- apk update && apk upgrade
- apk add --update bash curl git gettext openssh python python-dev py-pip build-base openssl wget
- pip install docker-compose

- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com

- ENVIRONMENT=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $1}')
- PRODUCTION_TAG=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $2}')
- export PRODUCTION_IMAGE="$CI_REGISTRY_IMAGE:$PRODUCTION_TAG"

after_script:
  - docker logout registry.gitlab.com

.cache_template: &cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./node_modules

.quality_assurance_script_template: &quality_assurance_script
  script:
    - cp .env.dist .env
    - docker-compose -f docker-compose.yml -f ./docker/docker-compose.ci.yml up -d
    - docker-compose run --rm ui_app yarn install
    - docker-compose run --rm ui_app eslint src/**/*.js src/**/*.jsx
    - docker-compose run --rm ui_app yarn test --coverage
    - docker-compose down -v --remove-orphans

.build_script_template: &build_script
  script:
    - cp .env.dist .env
    - docker-compose -f docker-compose.yml -f ./docker/docker-compose.ci.yml up -d
    - docker-compose run --rm ui_app yarn install
    - docker-compose run --rm ui_app eslint src/**/*.js src/**/*.jsx
    - docker-compose run --rm ui_app yarn test --coverage
    - docker-compose down -v --remove-orphans

    - rm .env && envsubst < ./docker/production/.env.dist > ./.env
    - docker build --target bicing_ui_app_prod -t $PRODUCTION_IMAGE .
    - docker push $PRODUCTION_IMAGE

.production_script_template: &production_script
  script:
    - chmod +x ./docker/production/deploy.sh
    - ./docker/production/deploy.sh

.generate_badges_template: &generate_badges_script
  script:
    - chmod +x ./documentation/badges/upload.sh
    - ./documentation/badges/upload.sh

test:
  <<: *cache
  <<: *quality_assurance_script
  environment: test
  only:
    - /^[F|f]eature\/.*$/
  stage: test

build:
  <<: *build_script
  environment: build
  only:
    - /^[R|r]elease\/.*$/
    - /^[H|h]otfix\/.*$/
  stage: build

production:
  <<: *production_script
  environment: production
  only:
    - /^[R|r]elease\/.*$/
    - /^[H|h]otfix\/.*$/
  stage: production
  when: manual

publish:
  <<: *generate_badges_script
  environment: publish
  stage: publish
  only:
    - master